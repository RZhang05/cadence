// Code generated by "stringer -type=Opcode"; DO NOT EDIT.

package opcode

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Unknown-0]
	_ = x[Return-1]
	_ = x[ReturnValue-2]
	_ = x[Jump-3]
	_ = x[JumpIfFalse-4]
	_ = x[IntAdd-11]
	_ = x[IntSubtract-12]
	_ = x[IntMultiply-13]
	_ = x[IntDivide-14]
	_ = x[IntMod-15]
	_ = x[IntLess-16]
	_ = x[IntGreater-17]
	_ = x[IntLessOrEqual-18]
	_ = x[IntGreaterOrEqual-19]
	_ = x[Equal-31]
	_ = x[NotEqual-32]
	_ = x[Unwrap-33]
	_ = x[Destroy-34]
	_ = x[Transfer-35]
	_ = x[Cast-36]
	_ = x[True-41]
	_ = x[False-42]
	_ = x[New-43]
	_ = x[Path-44]
	_ = x[Nil-45]
	_ = x[NewArray-46]
	_ = x[GetConstant-61]
	_ = x[GetLocal-62]
	_ = x[SetLocal-63]
	_ = x[GetGlobal-64]
	_ = x[SetGlobal-65]
	_ = x[GetField-66]
	_ = x[SetField-67]
	_ = x[SetIndex-68]
	_ = x[GetIndex-69]
	_ = x[Invoke-81]
	_ = x[InvokeDynamic-82]
	_ = x[Drop-91]
	_ = x[Dup-92]
}

const (
	_Opcode_name_0 = "UnknownReturnReturnValueJumpJumpIfFalse"
	_Opcode_name_1 = "IntAddIntSubtractIntMultiplyIntDivideIntModIntLessIntGreaterIntLessOrEqualIntGreaterOrEqual"
	_Opcode_name_2 = "EqualNotEqualUnwrapDestroyTransferCast"
	_Opcode_name_3 = "TrueFalseNewPathNilNewArray"
	_Opcode_name_4 = "GetConstantGetLocalSetLocalGetGlobalSetGlobalGetFieldSetFieldSetIndexGetIndex"
	_Opcode_name_5 = "InvokeInvokeDynamic"
	_Opcode_name_6 = "DropDup"
)

var (
	_Opcode_index_0 = [...]uint8{0, 7, 13, 24, 28, 39}
	_Opcode_index_1 = [...]uint8{0, 6, 17, 28, 37, 43, 50, 60, 74, 91}
	_Opcode_index_2 = [...]uint8{0, 5, 13, 19, 26, 34, 38}
	_Opcode_index_3 = [...]uint8{0, 4, 9, 12, 16, 19, 27}
	_Opcode_index_4 = [...]uint8{0, 11, 19, 27, 36, 45, 53, 61, 69, 77}
	_Opcode_index_5 = [...]uint8{0, 6, 19}
	_Opcode_index_6 = [...]uint8{0, 4, 7}
)

func (i Opcode) String() string {
	switch {
	case i <= 4:
		return _Opcode_name_0[_Opcode_index_0[i]:_Opcode_index_0[i+1]]
	case 11 <= i && i <= 19:
		i -= 11
		return _Opcode_name_1[_Opcode_index_1[i]:_Opcode_index_1[i+1]]
	case 31 <= i && i <= 36:
		i -= 31
		return _Opcode_name_2[_Opcode_index_2[i]:_Opcode_index_2[i+1]]
	case 41 <= i && i <= 46:
		i -= 41
		return _Opcode_name_3[_Opcode_index_3[i]:_Opcode_index_3[i+1]]
	case 61 <= i && i <= 69:
		i -= 61
		return _Opcode_name_4[_Opcode_index_4[i]:_Opcode_index_4[i+1]]
	case 81 <= i && i <= 82:
		i -= 81
		return _Opcode_name_5[_Opcode_index_5[i]:_Opcode_index_5[i+1]]
	case 91 <= i && i <= 92:
		i -= 91
		return _Opcode_name_6[_Opcode_index_6[i]:_Opcode_index_6[i+1]]
	default:
		return "Opcode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
