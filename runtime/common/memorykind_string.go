// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindAddressValue-1]
	_ = x[MemoryKindStringValue-2]
	_ = x[MemoryKindCharacterValue-3]
	_ = x[MemoryKindNumberValue-4]
	_ = x[MemoryKindArrayValueBase-5]
	_ = x[MemoryKindDictionaryValueBase-6]
	_ = x[MemoryKindCompositeValueBase-7]
	_ = x[MemoryKindSimpleCompositeValueBase-8]
	_ = x[MemoryKindOptionalValue-9]
	_ = x[MemoryKindTypeValue-10]
	_ = x[MemoryKindPathValue-11]
	_ = x[MemoryKindCapabilityValue-12]
	_ = x[MemoryKindStorageReferenceValue-13]
	_ = x[MemoryKindEphemeralReferenceValue-14]
	_ = x[MemoryKindInterpretedFunctionValue-15]
	_ = x[MemoryKindHostFunctionValue-16]
	_ = x[MemoryKindBoundFunctionValue-17]
	_ = x[MemoryKindBigInt-18]
	_ = x[MemoryKindSimpleCompositeValue-19]
	_ = x[MemoryKindPublishedValue-20]
	_ = x[MemoryKindStorageCapabilityControllerValue-21]
	_ = x[MemoryKindAccountCapabilityControllerValue-22]
	_ = x[MemoryKindAtreeArrayDataSlab-23]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-24]
	_ = x[MemoryKindAtreeArrayElementOverhead-25]
	_ = x[MemoryKindAtreeMapDataSlab-26]
	_ = x[MemoryKindAtreeMapMetaDataSlab-27]
	_ = x[MemoryKindAtreeMapElementOverhead-28]
	_ = x[MemoryKindAtreeMapPreAllocatedElement-29]
	_ = x[MemoryKindAtreeEncodedSlab-30]
	_ = x[MemoryKindPrimitiveStaticType-31]
	_ = x[MemoryKindCompositeStaticType-32]
	_ = x[MemoryKindInterfaceStaticType-33]
	_ = x[MemoryKindVariableSizedStaticType-34]
	_ = x[MemoryKindConstantSizedStaticType-35]
	_ = x[MemoryKindDictionaryStaticType-36]
	_ = x[MemoryKindInclusiveRangeStaticType-37]
	_ = x[MemoryKindOptionalStaticType-38]
	_ = x[MemoryKindIntersectionStaticType-39]
	_ = x[MemoryKindEntitlementSetStaticAccess-40]
	_ = x[MemoryKindEntitlementMapStaticAccess-41]
	_ = x[MemoryKindReferenceStaticType-42]
	_ = x[MemoryKindCapabilityStaticType-43]
	_ = x[MemoryKindFunctionStaticType-44]
	_ = x[MemoryKindCadenceVoidValue-45]
	_ = x[MemoryKindCadenceOptionalValue-46]
	_ = x[MemoryKindCadenceBoolValue-47]
	_ = x[MemoryKindCadenceStringValue-48]
	_ = x[MemoryKindCadenceCharacterValue-49]
	_ = x[MemoryKindCadenceAddressValue-50]
	_ = x[MemoryKindCadenceIntValue-51]
	_ = x[MemoryKindCadenceNumberValue-52]
	_ = x[MemoryKindCadenceArrayValueBase-53]
	_ = x[MemoryKindCadenceArrayValueLength-54]
	_ = x[MemoryKindCadenceDictionaryValue-55]
	_ = x[MemoryKindCadenceInclusiveRangeValue-56]
	_ = x[MemoryKindCadenceKeyValuePair-57]
	_ = x[MemoryKindCadenceStructValueBase-58]
	_ = x[MemoryKindCadenceStructValueSize-59]
	_ = x[MemoryKindCadenceResourceValueBase-60]
	_ = x[MemoryKindCadenceAttachmentValueBase-61]
	_ = x[MemoryKindCadenceResourceValueSize-62]
	_ = x[MemoryKindCadenceAttachmentValueSize-63]
	_ = x[MemoryKindCadenceEventValueBase-64]
	_ = x[MemoryKindCadenceEventValueSize-65]
	_ = x[MemoryKindCadenceContractValueBase-66]
	_ = x[MemoryKindCadenceContractValueSize-67]
	_ = x[MemoryKindCadenceEnumValueBase-68]
	_ = x[MemoryKindCadenceEnumValueSize-69]
	_ = x[MemoryKindCadencePathValue-70]
	_ = x[MemoryKindCadenceTypeValue-71]
	_ = x[MemoryKindCadenceCapabilityValue-72]
	_ = x[MemoryKindCadenceFunctionValue-73]
	_ = x[MemoryKindCadenceOptionalType-74]
	_ = x[MemoryKindCadenceRestrictedType-75]
	_ = x[MemoryKindCadenceVariableSizedArrayType-76]
	_ = x[MemoryKindCadenceConstantSizedArrayType-77]
	_ = x[MemoryKindCadenceDictionaryType-78]
	_ = x[MemoryKindCadenceInclusiveRangeType-79]
	_ = x[MemoryKindCadenceField-80]
	_ = x[MemoryKindCadenceParameter-81]
	_ = x[MemoryKindCadenceTypeParameter-82]
	_ = x[MemoryKindCadenceStructType-83]
	_ = x[MemoryKindCadenceResourceType-84]
	_ = x[MemoryKindCadenceAttachmentType-85]
	_ = x[MemoryKindCadenceEventType-86]
	_ = x[MemoryKindCadenceContractType-87]
	_ = x[MemoryKindCadenceStructInterfaceType-88]
	_ = x[MemoryKindCadenceResourceInterfaceType-89]
	_ = x[MemoryKindCadenceContractInterfaceType-90]
	_ = x[MemoryKindCadenceFunctionType-91]
	_ = x[MemoryKindCadenceEntitlementSetAccess-92]
	_ = x[MemoryKindCadenceEntitlementMapAccess-93]
	_ = x[MemoryKindCadenceReferenceType-94]
	_ = x[MemoryKindCadenceIntersectionType-95]
	_ = x[MemoryKindCadenceCapabilityType-96]
	_ = x[MemoryKindCadenceEnumType-97]
	_ = x[MemoryKindRawString-98]
	_ = x[MemoryKindAddressLocation-99]
	_ = x[MemoryKindBytes-100]
	_ = x[MemoryKindVariable-101]
	_ = x[MemoryKindCompositeTypeInfo-102]
	_ = x[MemoryKindCompositeField-103]
	_ = x[MemoryKindInvocation-104]
	_ = x[MemoryKindStorageMap-105]
	_ = x[MemoryKindStorageKey-106]
	_ = x[MemoryKindTypeToken-107]
	_ = x[MemoryKindErrorToken-108]
	_ = x[MemoryKindSpaceToken-109]
	_ = x[MemoryKindProgram-110]
	_ = x[MemoryKindIdentifier-111]
	_ = x[MemoryKindArgument-112]
	_ = x[MemoryKindBlock-113]
	_ = x[MemoryKindFunctionBlock-114]
	_ = x[MemoryKindParameter-115]
	_ = x[MemoryKindParameterList-116]
	_ = x[MemoryKindTypeParameter-117]
	_ = x[MemoryKindTypeParameterList-118]
	_ = x[MemoryKindTransfer-119]
	_ = x[MemoryKindMembers-120]
	_ = x[MemoryKindTypeAnnotation-121]
	_ = x[MemoryKindDictionaryEntry-122]
	_ = x[MemoryKindFunctionDeclaration-123]
	_ = x[MemoryKindCompositeDeclaration-124]
	_ = x[MemoryKindAttachmentDeclaration-125]
	_ = x[MemoryKindInterfaceDeclaration-126]
	_ = x[MemoryKindEntitlementDeclaration-127]
	_ = x[MemoryKindEntitlementMappingElement-128]
	_ = x[MemoryKindEntitlementMappingDeclaration-129]
	_ = x[MemoryKindEnumCaseDeclaration-130]
	_ = x[MemoryKindFieldDeclaration-131]
	_ = x[MemoryKindTransactionDeclaration-132]
	_ = x[MemoryKindImportDeclaration-133]
	_ = x[MemoryKindVariableDeclaration-134]
	_ = x[MemoryKindSpecialFunctionDeclaration-135]
	_ = x[MemoryKindPragmaDeclaration-136]
	_ = x[MemoryKindAssignmentStatement-137]
	_ = x[MemoryKindBreakStatement-138]
	_ = x[MemoryKindContinueStatement-139]
	_ = x[MemoryKindEmitStatement-140]
	_ = x[MemoryKindExpressionStatement-141]
	_ = x[MemoryKindForStatement-142]
	_ = x[MemoryKindIfStatement-143]
	_ = x[MemoryKindReturnStatement-144]
	_ = x[MemoryKindSwapStatement-145]
	_ = x[MemoryKindSwitchStatement-146]
	_ = x[MemoryKindWhileStatement-147]
	_ = x[MemoryKindRemoveStatement-148]
	_ = x[MemoryKindBooleanExpression-149]
	_ = x[MemoryKindVoidExpression-150]
	_ = x[MemoryKindNilExpression-151]
	_ = x[MemoryKindStringExpression-152]
	_ = x[MemoryKindIntegerExpression-153]
	_ = x[MemoryKindFixedPointExpression-154]
	_ = x[MemoryKindArrayExpression-155]
	_ = x[MemoryKindDictionaryExpression-156]
	_ = x[MemoryKindIdentifierExpression-157]
	_ = x[MemoryKindInvocationExpression-158]
	_ = x[MemoryKindMemberExpression-159]
	_ = x[MemoryKindIndexExpression-160]
	_ = x[MemoryKindConditionalExpression-161]
	_ = x[MemoryKindUnaryExpression-162]
	_ = x[MemoryKindBinaryExpression-163]
	_ = x[MemoryKindFunctionExpression-164]
	_ = x[MemoryKindCastingExpression-165]
	_ = x[MemoryKindCreateExpression-166]
	_ = x[MemoryKindDestroyExpression-167]
	_ = x[MemoryKindReferenceExpression-168]
	_ = x[MemoryKindForceExpression-169]
	_ = x[MemoryKindPathExpression-170]
	_ = x[MemoryKindAttachExpression-171]
	_ = x[MemoryKindConstantSizedType-172]
	_ = x[MemoryKindDictionaryType-173]
	_ = x[MemoryKindFunctionType-174]
	_ = x[MemoryKindInstantiationType-175]
	_ = x[MemoryKindNominalType-176]
	_ = x[MemoryKindOptionalType-177]
	_ = x[MemoryKindReferenceType-178]
	_ = x[MemoryKindIntersectionType-179]
	_ = x[MemoryKindVariableSizedType-180]
	_ = x[MemoryKindPosition-181]
	_ = x[MemoryKindRange-182]
	_ = x[MemoryKindElaboration-183]
	_ = x[MemoryKindActivation-184]
	_ = x[MemoryKindActivationEntries-185]
	_ = x[MemoryKindVariableSizedSemaType-186]
	_ = x[MemoryKindConstantSizedSemaType-187]
	_ = x[MemoryKindDictionarySemaType-188]
	_ = x[MemoryKindOptionalSemaType-189]
	_ = x[MemoryKindIntersectionSemaType-190]
	_ = x[MemoryKindReferenceSemaType-191]
	_ = x[MemoryKindEntitlementSemaType-192]
	_ = x[MemoryKindEntitlementMapSemaType-193]
	_ = x[MemoryKindEntitlementRelationSemaType-194]
	_ = x[MemoryKindCapabilitySemaType-195]
	_ = x[MemoryKindInclusiveRangeSemaType-196]
	_ = x[MemoryKindOrderedMap-197]
	_ = x[MemoryKindOrderedMapEntryList-198]
	_ = x[MemoryKindOrderedMapEntry-199]
	_ = x[MemoryKindLast-200]
}

const _MemoryKind_name = "UnknownAddressValueStringValueCharacterValueNumberValueArrayValueBaseDictionaryValueBaseCompositeValueBaseSimpleCompositeValueBaseOptionalValueTypeValuePathValueCapabilityValueStorageReferenceValueEphemeralReferenceValueInterpretedFunctionValueHostFunctionValueBoundFunctionValueBigIntSimpleCompositeValuePublishedValueStorageCapabilityControllerValueAccountCapabilityControllerValueAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeArrayElementOverheadAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadAtreeMapPreAllocatedElementAtreeEncodedSlabPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeInclusiveRangeStaticTypeOptionalStaticTypeIntersectionStaticTypeEntitlementSetStaticAccessEntitlementMapStaticAccessReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidValueCadenceOptionalValueCadenceBoolValueCadenceStringValueCadenceCharacterValueCadenceAddressValueCadenceIntValueCadenceNumberValueCadenceArrayValueBaseCadenceArrayValueLengthCadenceDictionaryValueCadenceInclusiveRangeValueCadenceKeyValuePairCadenceStructValueBaseCadenceStructValueSizeCadenceResourceValueBaseCadenceAttachmentValueBaseCadenceResourceValueSizeCadenceAttachmentValueSizeCadenceEventValueBaseCadenceEventValueSizeCadenceContractValueBaseCadenceContractValueSizeCadenceEnumValueBaseCadenceEnumValueSizeCadencePathValueCadenceTypeValueCadenceCapabilityValueCadenceFunctionValueCadenceOptionalTypeCadenceRestrictedTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceInclusiveRangeTypeCadenceFieldCadenceParameterCadenceTypeParameterCadenceStructTypeCadenceResourceTypeCadenceAttachmentTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceEntitlementSetAccessCadenceEntitlementMapAccessCadenceReferenceTypeCadenceIntersectionTypeCadenceCapabilityTypeCadenceEnumTypeRawStringAddressLocationBytesVariableCompositeTypeInfoCompositeFieldInvocationStorageMapStorageKeyTypeTokenErrorTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTypeParameterTypeParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationAttachmentDeclarationInterfaceDeclarationEntitlementDeclarationEntitlementMappingElementEntitlementMappingDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementRemoveStatementBooleanExpressionVoidExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionAttachExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeIntersectionTypeVariableSizedTypePositionRangeElaborationActivationActivationEntriesVariableSizedSemaTypeConstantSizedSemaTypeDictionarySemaTypeOptionalSemaTypeIntersectionSemaTypeReferenceSemaTypeEntitlementSemaTypeEntitlementMapSemaTypeEntitlementRelationSemaTypeCapabilitySemaTypeInclusiveRangeSemaTypeOrderedMapOrderedMapEntryListOrderedMapEntryLast"

var _MemoryKind_index = [...]uint16{0, 7, 19, 30, 44, 55, 69, 88, 106, 130, 143, 152, 161, 176, 197, 220, 244, 261, 279, 285, 305, 319, 351, 383, 401, 423, 448, 464, 484, 507, 534, 550, 569, 588, 607, 630, 653, 673, 697, 715, 737, 763, 789, 808, 828, 846, 862, 882, 898, 916, 937, 956, 971, 989, 1010, 1033, 1055, 1081, 1100, 1122, 1144, 1168, 1194, 1218, 1244, 1265, 1286, 1310, 1334, 1354, 1374, 1390, 1406, 1428, 1448, 1467, 1488, 1517, 1546, 1567, 1592, 1604, 1620, 1640, 1657, 1676, 1697, 1713, 1732, 1758, 1786, 1814, 1833, 1860, 1887, 1907, 1930, 1951, 1966, 1975, 1990, 1995, 2003, 2020, 2034, 2044, 2054, 2064, 2073, 2083, 2093, 2100, 2110, 2118, 2123, 2136, 2145, 2158, 2171, 2188, 2196, 2203, 2217, 2232, 2251, 2271, 2292, 2312, 2334, 2359, 2388, 2407, 2423, 2445, 2462, 2481, 2507, 2524, 2543, 2557, 2574, 2587, 2606, 2618, 2629, 2644, 2657, 2672, 2686, 2701, 2718, 2732, 2745, 2761, 2778, 2798, 2813, 2833, 2853, 2873, 2889, 2904, 2925, 2940, 2956, 2974, 2991, 3007, 3024, 3043, 3058, 3072, 3088, 3105, 3119, 3131, 3148, 3159, 3171, 3184, 3200, 3217, 3225, 3230, 3241, 3251, 3268, 3289, 3310, 3328, 3344, 3364, 3381, 3400, 3422, 3449, 3467, 3489, 3499, 3518, 3533, 3537}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
